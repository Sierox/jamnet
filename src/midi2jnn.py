import mido.midifiles.tracks as mitracks
from mido import MidiFile, MidiTrack, Message, MetaMessage
import copy
import numpy as np

# TODO: Tidying up and documenting

''' MIDI <-> Roll converter for creating JamNet data-sets and converting JamNet outputs to MIDI. '''

SIGNATURE = "Generated by JamNet Converter"

BASS = [32, 33, 34, 35, 36, 37, 38, 39]
PIANO = [0, 1, 2, 3, 4, 5, 6, 7]
ORGAN = [16, 17, 18, 19, 20, 21, 22, 23]
GUITAR = [24, 25, 26, 27, 28, 29, 30, 31]
SAX = [64, 65, 66, 67, 69]  # nice
BRASS = [56, 57, 58, 59, 60, 61, 62, 63]
CLARINET = [71]
FLUTE = [72, 73]
VIBRAPHONE = [11, 12, 13]
# STRINGS = [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55] # Not used in jazz, maybe for other genres.

# Define which instruments belong to which part
PART_INSTRUMENTS = {"bass": BASS, "acmp": PIANO + ORGAN + GUITAR,
                    "lead": SAX + BRASS + CLARINET + FLUTE + VIBRAPHONE}
# Define output instruments
OUTPUT_INSTRUMENTS = {"bass": 32, "acmp": 0, "lead": 11}  # 26 = Jazz Guitar

# For parsing instruments
PERC_NAMES = ["perc", "drum", "snare", "cymb", "bongo", "shake", "bd", "hh", "kick", "hi-hat", "hihat", "hi hat",
              "stick", "conga", "tamb", "agogo", "tom", "cabasa", "kit", "brush", "bell", "ride", "crash", "hat"]
PERC_SAFE_NAMES = ["org", "chro"]
LEAD_NAMES = ["lead", "melody", "voice"]



def midi_to_rollt(full_raw_midi_dir, f):
    """ MIDI to roll """
    midif = MidiFile(full_raw_midi_dir)
    roll = grouped_tracks_to_roll(parse_midi_tracks(midif), midif, f)
    tempo = parse_tempo(midif)
    return roll, tempo


def parse_midi_tracks(midif):
    tracks = []
    for i, track in enumerate(midif.tracks):
        track_name = parse_midi_track_name(track)
        instrument_type = parse_midi_track_instrument(track)
        if not instrument_type is None:
            is_perc = False
            for perc_name in PERC_NAMES:
                if perc_name in track_name.lower():
                    is_perc = True
                    for perc_safe_name in PERC_SAFE_NAMES:
                        if perc_safe_name in track_name.lower():
                            is_perc = False
                            break

            is_lead = False
            for lead_name in LEAD_NAMES:
                if lead_name in track_name.lower():
                    is_lead = True

            if is_lead:
                tracks.append((i, track_name, 'lead'))
            elif not is_perc:
                tracks.append((i, track_name, instrument_type))

    grouped_tracks = {"bass": list(), "acmp": list(), "lead": list()}
    for id, name, instrument in tracks:
        grouped_tracks[instrument].append(id)
    return grouped_tracks


def parse_midi_track_instrument(track):
    for msg in track:
        if msg.type == 'program_change':
            for inst_type in PART_INSTRUMENTS:
                for midi_index in PART_INSTRUMENTS[inst_type]:
                    if msg.program == midi_index:
                        return inst_type
    return None


def parse_midi_track_name(track):
    for msg in track:
        if msg.type == 'track_name':
            return msg.name
        if msg.type == 'text':
            return msg.text
    return "null"


def parse_tempo(midif):
    for i, track in enumerate(midif.tracks):
        for msg in track:
            if msg.type == "set_tempo":
                return msg.tempo


def grouped_tracks_to_roll(grouped_tracks, midif, f):
    jnn_piece_ = {"bass": list(), "acmp": list(), "lead": list()}
    starts = []
    lens = []
    for g in grouped_tracks:
        if grouped_tracks[g]:
            jnn_piece_[g], start = parse_notes(
                mitracks.merge_tracks([track for i, track in enumerate(midif.tracks) if i in grouped_tracks[g]]), f)
            starts.append(start)
            if jnn_piece_[g] is not None:
                lens.append(jnn_piece_[g].shape[1])
        else:
            jnn_piece_[g] = None  # No track

    max_len = max(lens)
    for g in jnn_piece_:
        if jnn_piece_[g] is None:
            jnn_piece_[g] = np.zeros((88, max_len), dtype=bool)
        elif jnn_piece_[g].shape[1] < max_len:
            jnn_piece_[g] = np.hstack((jnn_piece_[g], np.zeros((88, max_len - jnn_piece_[g].shape[1]), dtype=bool)))

    if len(starts) > 1:
        start = min(starts)
        for g in jnn_piece_:
            jnn_piece_[g] = np.delete(jnn_piece_[g], slice(0, start), 1)

    return np.dstack((jnn_piece_["lead"], jnn_piece_["acmp"], jnn_piece_["bass"]))


def parse_notes(track, f):
    midi_note_messages = []
    for msg in mitracks._to_abstime(track):
        if msg.type == 'note_on' or msg.type == 'note_off':
            midi_note_messages.append(msg)
    start = None
    roll = None
    for i in range(0, len(midi_note_messages)):
        if midi_note_messages[i].type == 'note_on':
            if start is None:
                start = midi_note_messages[i].time
            new = [midi_note_messages[i].note, midi_note_messages[i].time, 0]
            for j in range(i + 1, len(midi_note_messages)):
                if midi_note_messages[j].type == 'note_off' and midi_note_messages[j].note == new[0]:
                    new[2] += midi_note_messages[j].time
                    break
            if 0 < new[0] < 88:
                roll = add_note_to_roll(roll, new, f)
    return roll, int(start / f)


def add_note_to_roll(roll, note, f):
    note[1], note[2] = int(note[1] / f), int(note[2] / f)
    if roll is None:
        roll = np.zeros((88, note[2]), dtype=bool)
    elif roll.shape[1] < note[2]:
        roll = np.hstack((roll, np.zeros((88, note[2] - roll.shape[1]), dtype=bool)))
    roll[note[0], note[1]:note[2]] = 1
    return roll


def rollt_to_midi(rollt, full_midi_save_dir, f):
    """ Roll to MIDI. """
    roll, tempo = rollt
    midif = MidiFile(type=1)
    midif.tracks.append(generate_header_track(tempo))
    jnn_piece = {"lead": roll[:, :, 0], "acmp": roll[:, :, 1], "bass": roll[:, :, 2]}
    for channel, jnn_instrument in enumerate(jnn_piece):
        midif.tracks.append(jnn_track_to_midi_track(jnn_piece[jnn_instrument], jnn_instrument, channel, f))
    midif.save(full_midi_save_dir)
    return midif


def generate_header_track(tempo):
    midit = MidiTrack()
    midit.append(MetaMessage("time_signature", numerator=4, denominator=4,
                             clocks_per_click=24, notated_32nd_notes_per_beat=8, time=0))
    midit.append(MetaMessage("set_tempo", tempo=int(tempo / 2), time=0))
    midit.append(MetaMessage("copyright", text=SIGNATURE))
    midit.append(MetaMessage("end_of_track", time=1))
    return midit


def jnn_track_to_midi_track(track, jnn_instrument, channel, f):
    messages = [Message(type='program_change', channel=channel, program=OUTPUT_INSTRUMENTS[jnn_instrument], time=0),
                MetaMessage("track_name", name=jnn_instrument, time=0)]
    for note, pitch_line in enumerate(track[:, ]):
        last = 0
        start = 0
        for dt, n in enumerate(pitch_line):
            if last == 0 and n == 1:
                start = dt
            if n == 0 and last == 1:
                messages.append(Message(type="note_on", channel=channel, note=note, velocity=50, time=int(start*f)))
                messages.append(Message(type="note_off", channel=channel, note=note, velocity=0, time=int(dt*f)))
            last = n
    messages.sort(key=lambda msg: msg.time)
    return MidiTrack(mitracks.fix_end_of_track(mitracks._to_reltime(messages)))


def jnnize_midi(full_raw_midi_dir, full_jnnized_midi_save_dir, downscale_f):
    """ JNN'ize raw MIDI file. """
    rollt_to_midi(midi_to_rollt(full_raw_midi_dir, downscale_f), full_jnnized_midi_save_dir, downscale_f)


def pack_roll(roll):
    return np.packbits(roll, axis=1)


def unpack_roll(roll):
    return np.unpackbits(roll, axis=1)

# print("Start")
# jnnize_midi("data/raw_midi/ANightInTunisia.mid", "C:/Users/HP/Desktop/saved.mid", downscale_f=128.0)

# B = np.packbits(A, axis=1).reshape((88, -1, 3))
# print(B.shape, ", ", B.size, ", ", B.itemsize, ", ", B.size * B.itemsize)
